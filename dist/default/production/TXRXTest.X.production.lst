

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May  3 16:20:50 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _BAUDCONbits	set	4024
    25  0000                     _INTCONbits	set	4082
    26  0000                     _LATBbits	set	3978
    27  0000                     _LATCbits	set	3979
    28  0000                     _OSCCONbits	set	4051
    29  0000                     _PIE1bits	set	3997
    30  0000                     _PORTCbits	set	3970
    31  0000                     _RCREG	set	4014
    32  0000                     _RCSTAbits	set	4011
    33  0000                     _SPBRG	set	4015
    34  0000                     _TRISBbits	set	3987
    35  0000                     _TRISCbits	set	3988
    36  0000                     _TXREG	set	4013
    37  0000                     _TXSTAbits	set	4012
    38  0000                     _CREN	set	32092
    39  0000                     _OERR	set	32089
    40  0000                     _RCIF	set	31989
    41                           
    42                           	psect	smallconst
    43  000800                     __psmallconst:
    44                           	opt stack 0
    45  000800  00                 	db	0
    46  000801                     STR_3:
    47  000801  2D                 	db	45
    48  000802  2D                 	db	45
    49  000803  2D                 	db	45
    50  000804  2D                 	db	45
    51  000805  20                 	db	32
    52  000806  32                 	db	50	;'2'
    53  000807  30                 	db	48	;'0'
    54  000808  31                 	db	49	;'1'
    55  000809  39                 	db	57	;'9'
    56  00080A  20                 	db	32
    57  00080B  47                 	db	71	;'G'
    58  00080C  6F                 	db	111	;'o'
    59  00080D  6B                 	db	107	;'k'
    60  00080E  75                 	db	117	;'u'
    61  00080F  68                 	db	104	;'h'
    62  000810  73                 	db	115	;'s'
    63  000811  20                 	db	32
    64  000812  2D                 	db	45
    65  000813  20                 	db	32
    66  000814  54                 	db	84	;'T'
    67  000815  58                 	db	88	;'X'
    68  000816  2F                 	db	47
    69  000817  52                 	db	82	;'R'
    70  000818  58                 	db	88	;'X'
    71  000819  20                 	db	32
    72  00081A  54                 	db	84	;'T'
    73  00081B  45                 	db	69	;'E'
    74  00081C  53                 	db	83	;'S'
    75  00081D  54                 	db	84	;'T'
    76  00081E  20                 	db	32
    77  00081F  2D                 	db	45
    78  000820  2D                 	db	45
    79  000821  2D                 	db	45
    80  000822  2D                 	db	45
    81  000823  00                 	db	0
    82  000824  00                 	db	0
    83  000825                     STR_2:
    84  000825  2D                 	db	45
    85  000826  2D                 	db	45
    86  000827  2D                 	db	45
    87  000828  2D                 	db	45
    88  000829  2D                 	db	45
    89  00082A  2D                 	db	45
    90  00082B  2D                 	db	45
    91  00082C  2D                 	db	45
    92  00082D  2D                 	db	45
    93  00082E  2D                 	db	45
    94  00082F  2D                 	db	45
    95  000830  2D                 	db	45
    96  000831  2D                 	db	45
    97  000832  2D                 	db	45
    98  000833  2D                 	db	45
    99  000834  2D                 	db	45
   100  000835  2D                 	db	45
   101  000836  2D                 	db	45
   102  000837  2D                 	db	45
   103  000838  2D                 	db	45
   104  000839  2D                 	db	45
   105  00083A  2D                 	db	45
   106  00083B  2D                 	db	45
   107  00083C  2D                 	db	45
   108  00083D  2D                 	db	45
   109  00083E  2D                 	db	45
   110  00083F  2D                 	db	45
   111  000840  2D                 	db	45
   112  000841  2D                 	db	45
   113  000842  2D                 	db	45
   114  000843  2D                 	db	45
   115  000844  2D                 	db	45
   116  000845  2D                 	db	45
   117  000846  2D                 	db	45
   118  000847  00                 	db	0
   119  000848  00                 	db	0
   120  000849                     STR_6:
   121  000849  48                 	db	72	;'H'
   122  00084A  69                 	db	105	;'i'
   123  00084B  21                 	db	33
   124  00084C  20                 	db	32
   125  00084D  49                 	db	73	;'I'
   126  00084E  20                 	db	32
   127  00084F  72                 	db	114	;'r'
   128  000850  65                 	db	101	;'e'
   129  000851  70                 	db	112	;'p'
   130  000852  65                 	db	101	;'e'
   131  000853  61                 	db	97	;'a'
   132  000854  74                 	db	116	;'t'
   133  000855  20                 	db	32
   134  000856  61                 	db	97	;'a'
   135  000857  6C                 	db	108	;'l'
   136  000858  6C                 	db	108	;'l'
   137  000859  20                 	db	32
   138  00085A  64                 	db	100	;'d'
   139  00085B  6F                 	db	111	;'o'
   140  00085C  20                 	db	32
   141  00085D  79                 	db	121	;'y'
   142  00085E  6F                 	db	111	;'o'
   143  00085F  75                 	db	117	;'u'
   144  000860  20                 	db	32
   145  000861  73                 	db	115	;'s'
   146  000862  61                 	db	97	;'a'
   147  000863  79                 	db	121	;'y'
   148  000864  21                 	db	33
   149  000865  00                 	db	0
   150  000866  00                 	db	0
   151  000867                     STR_7:
   152  000867  28                 	db	40
   153  000868  45                 	db	69	;'E'
   154  000869  6E                 	db	110	;'n'
   155  00086A  64                 	db	100	;'d'
   156  00086B  6C                 	db	108	;'l'
   157  00086C  69                 	db	105	;'i'
   158  00086D  6E                 	db	110	;'n'
   159  00086E  65                 	db	101	;'e'
   160  00086F  20                 	db	32
   161  000870  63                 	db	99	;'c'
   162  000871  68                 	db	104	;'h'
   163  000872  61                 	db	97	;'a'
   164  000873  72                 	db	114	;'r'
   165  000874  3A                 	db	58	;':'
   166  000875  20                 	db	32
   167  000876  27                 	db	39
   168  000877  7D                 	db	125
   169  000878  27                 	db	39
   170  000879  29                 	db	41
   171  00087A  20                 	db	32
   172  00087B  2D                 	db	45
   173  00087C  3E                 	db	62	;'>'
   174  00087D  20                 	db	32
   175  00087E  00                 	db	0
   176  00087F  00                 	db	0
   177  000880                     STR_8:
   178  000880  52                 	db	82	;'R'
   179  000881  65                 	db	101	;'e'
   180  000882  63                 	db	99	;'c'
   181  000883  65                 	db	101	;'e'
   182  000884  69                 	db	105	;'i'
   183  000885  76                 	db	118	;'v'
   184  000886  65                 	db	101	;'e'
   185  000887  64                 	db	100	;'d'
   186  000888  3A                 	db	58	;':'
   187  000889  20                 	db	32
   188  00088A  00                 	db	0
   189  00088B  00                 	db	0
   190  00088C                     STR_11:
   191  00088C  00                 	db	0
   192  00088D  00                 	db	0
   193  00088E  00                 	db	0
   194  00088F                     STR_1:
   195  00088F  0A                 	db	10
   196  000890  00                 	db	0
   197  000891  00                 	db	0
   198  0000                     
   199                           ; #config settings
   200  000892  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           	psect	cinit
   203  000D8C                     __pcinit:
   204                           	opt stack 0
   205  000D8C                     start_initialization:
   206                           	opt stack 0
   207  000D8C                     __initialization:
   208                           	opt stack 0
   209                           
   210                           ; Clear objects allocated to BANK2 (255 bytes)
   211  000D8C  EE02  F000         	lfsr	0,__pbssBANK2
   212  000D90  EE10 F0FF          	lfsr	1,255
   213  000D94                     clear_0:
   214  000D94  6AEE               	clrf	postinc0,c
   215  000D96  50E5               	movf	postdec1,w,c
   216  000D98  50E1               	movf	fsr1l,w,c
   217  000D9A  E1FC               	bnz	clear_0
   218  000D9C  50E2               	movf	fsr1h,w,c
   219  000D9E  E1FA               	bnz	clear_0
   220                           
   221                           ; Clear objects allocated to BANK1 (255 bytes)
   222  000DA0  EE01  F000         	lfsr	0,__pbssBANK1
   223  000DA4  EE10 F0FF          	lfsr	1,255
   224  000DA8                     clear_1:
   225  000DA8  6AEE               	clrf	postinc0,c
   226  000DAA  50E5               	movf	postdec1,w,c
   227  000DAC  50E1               	movf	fsr1l,w,c
   228  000DAE  E1FC               	bnz	clear_1
   229  000DB0  50E2               	movf	fsr1h,w,c
   230  000DB2  E1FA               	bnz	clear_1
   231                           
   232                           ; Clear objects allocated to COMRAM (4 bytes)
   233  000DB4  6A27               	clrf	(__pbssCOMRAM+3)& (0+255),c
   234  000DB6  6A26               	clrf	(__pbssCOMRAM+2)& (0+255),c
   235  000DB8  6A25               	clrf	(__pbssCOMRAM+1)& (0+255),c
   236  000DBA  6A24               	clrf	__pbssCOMRAM& (0+255),c
   237  000DBC                     end_of_initialization:
   238                           	opt stack 0
   239  000DBC                     __end_of__initialization:
   240                           	opt stack 0
   241  000DBC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   242  000DBE  6EF8               	movwf	tblptru,c
   243  000DC0  0100               	movlb	0
   244  000DC2  EF20  F006         	goto	_main	;jump to C main() function
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           postdec1	equ	0xFE5
   248                           fsr1h	equ	0xFE2
   249                           fsr1l	equ	0xFE1
   250                           
   251                           	psect	bssCOMRAM
   252  000024                     __pbssCOMRAM:
   253                           	opt stack 0
   254  000024                     _pending:
   255                           	opt stack 0
   256  000024                     	ds	2
   257  000026                     _rxBufferLevel:
   258                           	opt stack 0
   259  000026                     	ds	2
   260                           tblptru	equ	0xFF8
   261                           postinc0	equ	0xFEE
   262                           postdec1	equ	0xFE5
   263                           fsr1h	equ	0xFE2
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	bssBANK1
   267  000100                     __pbssBANK1:
   268                           	opt stack 0
   269  000100                     _rxBuffer:
   270                           	opt stack 0
   271  000100                     	ds	255
   272                           tblptru	equ	0xFF8
   273                           postinc0	equ	0xFEE
   274                           postdec1	equ	0xFE5
   275                           fsr1h	equ	0xFE2
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssBANK2
   279  000200                     __pbssBANK2:
   280                           	opt stack 0
   281  000200                     _rxExit:
   282                           	opt stack 0
   283  000200                     	ds	255
   284                           tblptru	equ	0xFF8
   285                           postinc0	equ	0xFEE
   286                           postdec1	equ	0xFE5
   287                           fsr1h	equ	0xFE2
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	cstackCOMRAM
   291  000001                     __pcstackCOMRAM:
   292                           	opt stack 0
   293  000001                     permutAndResetsBuffers@i:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x0
   297  000001                     	ds	2
   298  000003                     ??_ISR:
   299                           
   300                           ; 0 bytes @ 0x2
   301  000003                     	ds	18
   302  000015                     ??_Delay1Second:
   303  000015                     ?_SerialPending:
   304                           	opt stack 0
   305  000015                     ?_ReadSerial:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x14
   309  000015                     	ds	1
   310  000016                     Delay1Second@i:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x15
   314  000016                     	ds	1
   315  000017                     SerialPrint@string:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x16
   319  000017                     	ds	2
   320  000019                     SerialPrint@addEndLine:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x18
   324  000019                     	ds	2
   325  00001B                     ??_SerialPrint:
   326                           
   327                           ; 0 bytes @ 0x1A
   328  00001B                     	ds	2
   329  00001D                     SerialPrint@position:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x1C
   333  00001D                     	ds	2
   334  00001F                     
   335                           ; 2 bytes @ 0x1E
   336  00001F                     	ds	2
   337  000021                     
   338                           ; 3 bytes @ 0x20
   339  000021                     	ds	3
   340  000024                     tblptru	equ	0xFF8
   341                           postinc0	equ	0xFEE
   342                           postdec1	equ	0xFE5
   343                           fsr1h	equ	0xFE2
   344                           fsr1l	equ	0xFE1
   345                           
   346                           ; 0 bytes @ 0x23
   347 ;;
   348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   349 ;;
   350 ;; *************** function _main *****************
   351 ;; Defined at:
   352 ;;		line 44 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;  argc            2   30[COMRAM] int 
   355 ;;  argv            3   32[COMRAM] PTR PTR unsigned char 
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;		None               void
   360 ;; Registers used:
   361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   367 ;;      Params:         5       0       0       0       0       0       0       0       0
   368 ;;      Locals:         0       0       0       0       0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0       0       0       0       0
   370 ;;      Totals:         5       0       0       0       0       0       0       0       0
   371 ;;Total ram usage:        5 bytes
   372 ;; Hardware stack levels required when called:    3
   373 ;; This function calls:
   374 ;;		_Delay1Second
   375 ;;		_ReadSerial
   376 ;;		_SerialPending
   377 ;;		_SerialPrint
   378 ;;		_Setup
   379 ;; This function is called by:
   380 ;;		Startup code after reset
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           	psect	text0
   385  000C40                     __ptext0:
   386                           	opt stack 0
   387  000C40                     _main:
   388                           	opt stack 28
   389                           
   390                           ;main.c: 45: Setup();
   391                           
   392                           ;incstack = 0
   393  000C40  ECE3  F006         	call	_Setup	;wreg free
   394                           
   395                           ;main.c: 46: SerialPrint("\n\0",1);
   396  000C44  0E8F               	movlw	low STR_1
   397  000C46  6E17               	movwf	SerialPrint@string,c
   398  000C48  0E08               	movlw	high STR_1
   399  000C4A  6E18               	movwf	SerialPrint@string+1,c
   400  000C4C  0E00               	movlw	0
   401  000C4E  6E1A               	movwf	SerialPrint@addEndLine+1,c
   402  000C50  0E01               	movlw	1
   403  000C52  6E19               	movwf	SerialPrint@addEndLine,c
   404  000C54  EC4A  F004         	call	_SerialPrint	;wreg free
   405                           
   406                           ;main.c: 47: SerialPrint("----------------------------------\0",1);
   407  000C58  0E25               	movlw	low STR_2
   408  000C5A  6E17               	movwf	SerialPrint@string,c
   409  000C5C  0E08               	movlw	high STR_2
   410  000C5E  6E18               	movwf	SerialPrint@string+1,c
   411  000C60  0E00               	movlw	0
   412  000C62  6E1A               	movwf	SerialPrint@addEndLine+1,c
   413  000C64  0E01               	movlw	1
   414  000C66  6E19               	movwf	SerialPrint@addEndLine,c
   415  000C68  EC4A  F004         	call	_SerialPrint	;wreg free
   416                           
   417                           ;main.c: 48: SerialPrint("---- 2019 Gokuhs - TX/RX TEST ----\0",1);
   418  000C6C  0E01               	movlw	low STR_3
   419  000C6E  6E17               	movwf	SerialPrint@string,c
   420  000C70  0E08               	movlw	high STR_3
   421  000C72  6E18               	movwf	SerialPrint@string+1,c
   422  000C74  0E00               	movlw	0
   423  000C76  6E1A               	movwf	SerialPrint@addEndLine+1,c
   424  000C78  0E01               	movlw	1
   425  000C7A  6E19               	movwf	SerialPrint@addEndLine,c
   426  000C7C  EC4A  F004         	call	_SerialPrint	;wreg free
   427                           
   428                           ;main.c: 49: SerialPrint("----------------------------------\0",1);
   429  000C80  0E25               	movlw	low STR_2
   430  000C82  6E17               	movwf	SerialPrint@string,c
   431  000C84  0E08               	movlw	high STR_2
   432  000C86  6E18               	movwf	SerialPrint@string+1,c
   433  000C88  0E00               	movlw	0
   434  000C8A  6E1A               	movwf	SerialPrint@addEndLine+1,c
   435  000C8C  0E01               	movlw	1
   436  000C8E  6E19               	movwf	SerialPrint@addEndLine,c
   437  000C90  EC4A  F004         	call	_SerialPrint	;wreg free
   438                           
   439                           ;main.c: 50: SerialPrint("\n\0",1);
   440  000C94  0E8F               	movlw	low STR_1
   441  000C96  6E17               	movwf	SerialPrint@string,c
   442  000C98  0E08               	movlw	high STR_1
   443  000C9A  6E18               	movwf	SerialPrint@string+1,c
   444  000C9C  0E00               	movlw	0
   445  000C9E  6E1A               	movwf	SerialPrint@addEndLine+1,c
   446  000CA0  0E01               	movlw	1
   447  000CA2  6E19               	movwf	SerialPrint@addEndLine,c
   448  000CA4  EC4A  F004         	call	_SerialPrint	;wreg free
   449                           
   450                           ;main.c: 51: SerialPrint("Hi! I repeat all do you say!\0", 1);
   451  000CA8  0E49               	movlw	low STR_6
   452  000CAA  6E17               	movwf	SerialPrint@string,c
   453  000CAC  0E08               	movlw	high STR_6
   454  000CAE  6E18               	movwf	SerialPrint@string+1,c
   455  000CB0  0E00               	movlw	0
   456  000CB2  6E1A               	movwf	SerialPrint@addEndLine+1,c
   457  000CB4  0E01               	movlw	1
   458  000CB6  6E19               	movwf	SerialPrint@addEndLine,c
   459  000CB8  EC4A  F004         	call	_SerialPrint	;wreg free
   460                           
   461                           ;main.c: 52: SerialPrint("(Endline char: '}') -> \0", 0);
   462  000CBC  0E67               	movlw	low STR_7
   463  000CBE  6E17               	movwf	SerialPrint@string,c
   464  000CC0  0E08               	movlw	high STR_7
   465  000CC2  6E18               	movwf	SerialPrint@string+1,c
   466  000CC4  0E00               	movlw	0
   467  000CC6  6E1A               	movwf	SerialPrint@addEndLine+1,c
   468  000CC8  0E00               	movlw	0
   469  000CCA  6E19               	movwf	SerialPrint@addEndLine,c
   470  000CCC  EC4A  F004         	call	_SerialPrint	;wreg free
   471                           
   472                           ;main.c: 53: Delay1Second();
   473  000CD0  ECFD  F004         	call	_Delay1Second	;wreg free
   474  000CD4  D000               	goto	l984
   475  000CD6                     l984:
   476                           
   477                           ;main.c: 55: if (SerialPending() == 1){
   478  000CD6  EC0C  F007         	call	_SerialPending	;wreg free
   479  000CDA  0415               	decf	?_SerialPending,w,c
   480  000CDC  1016               	iorwf	?_SerialPending+1,w,c
   481  000CDE  A4D8               	btfss	status,2,c
   482  000CE0  D7FA               	goto	l984
   483                           
   484                           ;main.c: 56: SerialPrint("Received: \0", 0);
   485  000CE2  0E80               	movlw	low STR_8
   486  000CE4  6E17               	movwf	SerialPrint@string,c
   487  000CE6  0E08               	movlw	high STR_8
   488  000CE8  6E18               	movwf	SerialPrint@string+1,c
   489  000CEA  0E00               	movlw	0
   490  000CEC  6E1A               	movwf	SerialPrint@addEndLine+1,c
   491  000CEE  0E00               	movlw	0
   492  000CF0  6E19               	movwf	SerialPrint@addEndLine,c
   493  000CF2  EC4A  F004         	call	_SerialPrint	;wreg free
   494                           
   495                           ;main.c: 57: SerialPrint(ReadSerial(),1);
   496  000CF6  ECF9  F006         	call	_ReadSerial	;wreg free
   497  000CFA  C015  F017         	movff	?_ReadSerial,SerialPrint@string
   498  000CFE  C016  F018         	movff	?_ReadSerial+1,SerialPrint@string+1
   499  000D02  0E00               	movlw	0
   500  000D04  6E1A               	movwf	SerialPrint@addEndLine+1,c
   501  000D06  0E01               	movlw	1
   502  000D08  6E19               	movwf	SerialPrint@addEndLine,c
   503  000D0A  EC4A  F004         	call	_SerialPrint	;wreg free
   504                           
   505                           ;main.c: 58: SerialPrint("\n\0", 0);
   506  000D0E  0E8F               	movlw	low STR_1
   507  000D10  6E17               	movwf	SerialPrint@string,c
   508  000D12  0E08               	movlw	high STR_1
   509  000D14  6E18               	movwf	SerialPrint@string+1,c
   510  000D16  0E00               	movlw	0
   511  000D18  6E1A               	movwf	SerialPrint@addEndLine+1,c
   512  000D1A  0E00               	movlw	0
   513  000D1C  6E19               	movwf	SerialPrint@addEndLine,c
   514  000D1E  EC4A  F004         	call	_SerialPrint	;wreg free
   515                           
   516                           ;main.c: 59: SerialPrint("(Endline char: '}') -> \0", 0);
   517  000D22  0E67               	movlw	low STR_7
   518  000D24  6E17               	movwf	SerialPrint@string,c
   519  000D26  0E08               	movlw	high STR_7
   520  000D28  6E18               	movwf	SerialPrint@string+1,c
   521  000D2A  0E00               	movlw	0
   522  000D2C  6E1A               	movwf	SerialPrint@addEndLine+1,c
   523  000D2E  0E00               	movlw	0
   524  000D30  6E19               	movwf	SerialPrint@addEndLine,c
   525  000D32  EC4A  F004         	call	_SerialPrint	;wreg free
   526  000D36  D7CF               	goto	l984
   527  000D38  EF0C  F000         	goto	start
   528  000D3C                     __end_of_main:
   529                           	opt stack 0
   530                           tblptru	equ	0xFF8
   531                           postinc0	equ	0xFEE
   532                           postdec1	equ	0xFE5
   533                           fsr1h	equ	0xFE2
   534                           fsr1l	equ	0xFE1
   535                           status	equ	0xFD8
   536                           
   537 ;; *************** function _Setup *****************
   538 ;; Defined at:
   539 ;;		line 20 in file "main.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;		None               void
   546 ;; Registers used:
   547 ;;		wreg, status,2
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   553 ;;      Params:         0       0       0       0       0       0       0       0       0
   554 ;;      Locals:         0       0       0       0       0       0       0       0       0
   555 ;;      Temps:          0       0       0       0       0       0       0       0       0
   556 ;;      Totals:         0       0       0       0       0       0       0       0       0
   557 ;;Total ram usage:        0 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; Hardware stack levels required when called:    2
   560 ;; This function calls:
   561 ;;		Nothing
   562 ;; This function is called by:
   563 ;;		_main
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           	psect	text1
   568  000DC6                     __ptext1:
   569                           	opt stack 0
   570  000DC6                     _Setup:
   571                           	opt stack 28
   572                           
   573                           ;main.c: 22: OSCCONbits.IRCF = 0b111;
   574                           
   575                           ;incstack = 0
   576  000DC6  88D3               	bsf	4051,4,c	;volatile
   577  000DC8  8AD3               	bsf	4051,5,c	;volatile
   578  000DCA  8CD3               	bsf	4051,6,c	;volatile
   579                           
   580                           ;main.c: 23: OSCCONbits.SCS = 0b10;
   581  000DCC  50D3               	movf	4051,w,c	;volatile
   582  000DCE  0BFC               	andlw	-4
   583  000DD0  0902               	iorlw	2
   584  000DD2  6ED3               	movwf	4051,c	;volatile
   585                           
   586                           ;main.c: 26: TRISCbits.RC6 = 0;
   587  000DD4  9C94               	bcf	3988,6,c	;volatile
   588                           
   589                           ;main.c: 27: TXSTAbits.TX9 = 0;
   590  000DD6  9CAC               	bcf	4012,6,c	;volatile
   591                           
   592                           ;main.c: 28: TXSTAbits.TXEN = 1;
   593  000DD8  8AAC               	bsf	4012,5,c	;volatile
   594                           
   595                           ;main.c: 29: TXSTAbits.SYNC = 0;
   596  000DDA  98AC               	bcf	4012,4,c	;volatile
   597                           
   598                           ;main.c: 30: TXSTAbits.BRGH = 0;
   599  000DDC  94AC               	bcf	4012,2,c	;volatile
   600                           
   601                           ;main.c: 31: BAUDCONbits.BRG16 = 0;
   602  000DDE  96B8               	bcf	4024,3,c	;volatile
   603                           
   604                           ;main.c: 32: RCSTAbits.SPEN = 1;
   605  000DE0  8EAB               	bsf	4011,7,c	;volatile
   606                           
   607                           ;main.c: 33: TRISBbits.RB4 = 0;
   608  000DE2  9893               	bcf	3987,4,c	;volatile
   609                           
   610                           ;main.c: 35: SPBRG = (unsigned char) (((8000000 / 9600) / 64) - 1);
   611  000DE4  0E0C               	movlw	12
   612  000DE6  6EAF               	movwf	4015,c	;volatile
   613                           
   614                           ;main.c: 38: RCSTAbits.CREN=1;
   615  000DE8  88AB               	bsf	4011,4,c	;volatile
   616                           
   617                           ;main.c: 39: PIE1bits.RCIE=1;
   618  000DEA  8A9D               	bsf	3997,5,c	;volatile
   619                           
   620                           ;main.c: 40: INTCONbits.PEIE = 1;
   621  000DEC  8CF2               	bsf	intcon,6,c	;volatile
   622                           
   623                           ;main.c: 41: INTCONbits.GIE = 1;
   624  000DEE  8EF2               	bsf	intcon,7,c	;volatile
   625  000DF0  0012               	return		;funcret
   626  000DF2                     __end_of_Setup:
   627                           	opt stack 0
   628                           tblptru	equ	0xFF8
   629                           intcon	equ	0xFF2
   630                           postinc0	equ	0xFEE
   631                           postdec1	equ	0xFE5
   632                           fsr1h	equ	0xFE2
   633                           fsr1l	equ	0xFE1
   634                           status	equ	0xFD8
   635                           
   636 ;; *************** function _SerialPrint *****************
   637 ;; Defined at:
   638 ;;		line 82 in file "serial.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  string          2   22[COMRAM] PTR unsigned char 
   641 ;;		 -> STR_11(3), rxExit(255), STR_10(25), STR_9(3), 
   642 ;;		 -> STR_8(12), STR_7(25), STR_6(30), STR_5(3), 
   643 ;;		 -> STR_4(36), STR_3(36), STR_2(36), STR_1(3), 
   644 ;;  addEndLine      2   24[COMRAM] int 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  position        2   28[COMRAM] unsigned int 
   647 ;; Return value:  Size  Location     Type
   648 ;;		None               void
   649 ;; Registers used:
   650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   656 ;;      Params:         4       0       0       0       0       0       0       0       0
   657 ;;      Locals:         2       0       0       0       0       0       0       0       0
   658 ;;      Temps:          2       0       0       0       0       0       0       0       0
   659 ;;      Totals:         8       0       0       0       0       0       0       0       0
   660 ;;Total ram usage:        8 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    2
   663 ;; This function calls:
   664 ;;		Nothing
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text2
   671  000894                     __ptext2:
   672                           	opt stack 0
   673  000894                     _SerialPrint:
   674                           	opt stack 28
   675                           
   676                           ;serial.c: 84: unsigned int position = 0;
   677                           
   678                           ;incstack = 0
   679  000894  0E00               	movlw	0
   680  000896  6E1E               	movwf	SerialPrint@position+1,c
   681  000898  0E00               	movlw	0
   682  00089A  6E1D               	movwf	SerialPrint@position,c
   683                           
   684                           ;serial.c: 86: while (!TXSTAbits.TRMT) {
   685                           
   686                           ;serial.c: 85: do{
   687  00089C  D000               	goto	l116
   688  00089E                     l116:
   689  00089E  A2AC               	btfss	4012,1,c	;volatile
   690  0008A0  D7FE               	goto	l116
   691                           
   692                           ;serial.c: 87: }
   693                           ;serial.c: 89: TXREG = string[position];
   694  0008A2  501D               	movf	SerialPrint@position,w,c
   695  0008A4  2417               	addwf	SerialPrint@string,w,c
   696  0008A6  6E1B               	movwf	??_SerialPrint& (0+255),c
   697  0008A8  501E               	movf	SerialPrint@position+1,w,c
   698  0008AA  2018               	addwfc	SerialPrint@string+1,w,c
   699  0008AC  6E1C               	movwf	(??_SerialPrint+1)& (0+255),c
   700  0008AE  C01B  FFF6         	movff	??_SerialPrint,tblptrl
   701  0008B2  C01C  FFF7         	movff	??_SerialPrint+1,tblptrh
   702  0008B6  6AF8               	clrf	tblptru,c
   703  0008B8  0E07               	movlw	(high __ramtop+-1)
   704  0008BA  64F7               	cpfsgt	tblptrh,c
   705  0008BC  D003               	bra	u387
   706  0008BE  0008               	tblrd		*
   707  0008C0  50F5               	movf	tablat,w,c
   708  0008C2  D005               	bra	u380
   709  0008C4                     u387:
   710  0008C4  CFF6 FFE9          	movff	tblptrl,fsr0l
   711  0008C8  CFF7 FFEA          	movff	tblptrh,fsr0h
   712  0008CC  50EF               	movf	indf0,w,c
   713  0008CE                     u380:
   714  0008CE  6EAD               	movwf	4013,c	;volatile
   715                           
   716                           ;serial.c: 90: LATCbits.LATC0 = !PORTCbits.RC0;
   717  0008D0  B082               	btfsc	3970,0,c	;volatile
   718  0008D2  D003               	goto	u390
   719  0008D4  6A1B               	clrf	??_SerialPrint& (0+255),c
   720  0008D6  2A1B               	incf	??_SerialPrint& (0+255),f,c
   721  0008D8  D001               	goto	u408
   722  0008DA                     u390:
   723  0008DA  6A1B               	clrf	??_SerialPrint& (0+255),c
   724  0008DC                     u408:
   725  0008DC  508B               	movf	3979,w,c	;volatile
   726  0008DE  181B               	xorwf	??_SerialPrint,w,c
   727  0008E0  0BFE               	andlw	-2
   728  0008E2  181B               	xorwf	??_SerialPrint,w,c
   729  0008E4  6E8B               	movwf	3979,c	;volatile
   730                           
   731                           ;serial.c: 91: position++;
   732  0008E6  4A1D               	infsnz	SerialPrint@position,f,c
   733  0008E8  2A1E               	incf	SerialPrint@position+1,f,c
   734                           
   735                           ;serial.c: 92: }
   736                           ;serial.c: 93: while (string[position] != '\0' && string[position] != '\n' && position <
      +                           255);
   737  0008EA  501D               	movf	SerialPrint@position,w,c
   738  0008EC  2417               	addwf	SerialPrint@string,w,c
   739  0008EE  6E1B               	movwf	??_SerialPrint& (0+255),c
   740  0008F0  501E               	movf	SerialPrint@position+1,w,c
   741  0008F2  2018               	addwfc	SerialPrint@string+1,w,c
   742  0008F4  6E1C               	movwf	(??_SerialPrint+1)& (0+255),c
   743  0008F6  C01B  FFF6         	movff	??_SerialPrint,tblptrl
   744  0008FA  C01C  FFF7         	movff	??_SerialPrint+1,tblptrh
   745  0008FE  6AF8               	clrf	tblptru,c
   746  000900  0E07               	movlw	(high __ramtop+-1)
   747  000902  64F7               	cpfsgt	tblptrh,c
   748  000904  D003               	bra	u417
   749  000906  0008               	tblrd		*
   750  000908  50F5               	movf	tablat,w,c
   751  00090A  D005               	bra	u410
   752  00090C                     u417:
   753  00090C  CFF6 FFE9          	movff	tblptrl,fsr0l
   754  000910  CFF7 FFEA          	movff	tblptrh,fsr0h
   755  000914  50EF               	movf	indf0,w,c
   756  000916                     u410:
   757  000916  0900               	iorlw	0
   758  000918  B4D8               	btfsc	status,2,c
   759  00091A  D020               	goto	l928
   760  00091C  501D               	movf	SerialPrint@position,w,c
   761  00091E  2417               	addwf	SerialPrint@string,w,c
   762  000920  6E1B               	movwf	??_SerialPrint& (0+255),c
   763  000922  501E               	movf	SerialPrint@position+1,w,c
   764  000924  2018               	addwfc	SerialPrint@string+1,w,c
   765  000926  6E1C               	movwf	(??_SerialPrint+1)& (0+255),c
   766  000928  C01B  FFF6         	movff	??_SerialPrint,tblptrl
   767  00092C  C01C  FFF7         	movff	??_SerialPrint+1,tblptrh
   768  000930  6AF8               	clrf	tblptru,c
   769  000932  0E07               	movlw	(high __ramtop+-1)
   770  000934  64F7               	cpfsgt	tblptrh,c
   771  000936  D003               	bra	u437
   772  000938  0008               	tblrd		*
   773  00093A  50F5               	movf	tablat,w,c
   774  00093C  D005               	bra	u430
   775  00093E                     u437:
   776  00093E  CFF6 FFE9          	movff	tblptrl,fsr0l
   777  000942  CFF7 FFEA          	movff	tblptrh,fsr0h
   778  000946  50EF               	movf	indf0,w,c
   779  000948                     u430:
   780  000948  0A0A               	xorlw	10
   781  00094A  B4D8               	btfsc	status,2,c
   782  00094C  D007               	goto	l928
   783  00094E  501E               	movf	SerialPrint@position+1,w,c
   784  000950  E105               	bnz	l928
   785  000952  281D               	incf	SerialPrint@position,w,c
   786  000954  B0D8               	btfsc	status,0,c
   787  000956  D002               	goto	l928
   788  000958  D7A2               	goto	l116
   789  00095A  D000               	goto	l928
   790  00095C                     l928:
   791                           
   792                           ;serial.c: 94: if (string[position] != '\n'){
   793  00095C  501D               	movf	SerialPrint@position,w,c
   794  00095E  2417               	addwf	SerialPrint@string,w,c
   795  000960  6E1B               	movwf	??_SerialPrint& (0+255),c
   796  000962  501E               	movf	SerialPrint@position+1,w,c
   797  000964  2018               	addwfc	SerialPrint@string+1,w,c
   798  000966  6E1C               	movwf	(??_SerialPrint+1)& (0+255),c
   799  000968  C01B  FFF6         	movff	??_SerialPrint,tblptrl
   800  00096C  C01C  FFF7         	movff	??_SerialPrint+1,tblptrh
   801  000970  6AF8               	clrf	tblptru,c
   802  000972  0E07               	movlw	(high __ramtop+-1)
   803  000974  64F7               	cpfsgt	tblptrh,c
   804  000976  D003               	bra	u467
   805  000978  0008               	tblrd		*
   806  00097A  50F5               	movf	tablat,w,c
   807  00097C  D005               	bra	u460
   808  00097E                     u467:
   809  00097E  CFF6 FFE9          	movff	tblptrl,fsr0l
   810  000982  CFF7 FFEA          	movff	tblptrh,fsr0h
   811  000986  50EF               	movf	indf0,w,c
   812  000988                     u460:
   813  000988  0A0A               	xorlw	10
   814  00098A  B4D8               	btfsc	status,2,c
   815  00098C  D023               	goto	l934
   816                           
   817                           ;serial.c: 95: TXREG = string[position];
   818  00098E  501D               	movf	SerialPrint@position,w,c
   819  000990  2417               	addwf	SerialPrint@string,w,c
   820  000992  6E1B               	movwf	??_SerialPrint& (0+255),c
   821  000994  501E               	movf	SerialPrint@position+1,w,c
   822  000996  2018               	addwfc	SerialPrint@string+1,w,c
   823  000998  6E1C               	movwf	(??_SerialPrint+1)& (0+255),c
   824  00099A  C01B  FFF6         	movff	??_SerialPrint,tblptrl
   825  00099E  C01C  FFF7         	movff	??_SerialPrint+1,tblptrh
   826  0009A2  6AF8               	clrf	tblptru,c
   827  0009A4  0E07               	movlw	(high __ramtop+-1)
   828  0009A6  64F7               	cpfsgt	tblptrh,c
   829  0009A8  D003               	bra	u487
   830  0009AA  0008               	tblrd		*
   831  0009AC  50F5               	movf	tablat,w,c
   832  0009AE  D005               	bra	u480
   833  0009B0                     u487:
   834  0009B0  CFF6 FFE9          	movff	tblptrl,fsr0l
   835  0009B4  CFF7 FFEA          	movff	tblptrh,fsr0h
   836  0009B8  50EF               	movf	indf0,w,c
   837  0009BA                     u480:
   838  0009BA  6EAD               	movwf	4013,c	;volatile
   839                           
   840                           ;serial.c: 96: LATCbits.LATC0 = !PORTCbits.RC0;
   841  0009BC  B082               	btfsc	3970,0,c	;volatile
   842  0009BE  D003               	goto	u490
   843  0009C0  6A1B               	clrf	??_SerialPrint& (0+255),c
   844  0009C2  2A1B               	incf	??_SerialPrint& (0+255),f,c
   845  0009C4  D001               	goto	u508
   846  0009C6                     u490:
   847  0009C6  6A1B               	clrf	??_SerialPrint& (0+255),c
   848  0009C8                     u508:
   849  0009C8  508B               	movf	3979,w,c	;volatile
   850  0009CA  181B               	xorwf	??_SerialPrint,w,c
   851  0009CC  0BFE               	andlw	-2
   852  0009CE  181B               	xorwf	??_SerialPrint,w,c
   853  0009D0  6E8B               	movwf	3979,c	;volatile
   854  0009D2  D000               	goto	l934
   855  0009D4                     l934:
   856                           
   857                           ;serial.c: 97: }
   858                           ;serial.c: 98: if (addEndLine > 0) {
   859  0009D4  BE1A               	btfsc	SerialPrint@addEndLine+1,7,c
   860  0009D6  D00C               	goto	l127
   861  0009D8  501A               	movf	SerialPrint@addEndLine+1,w,c
   862  0009DA  E105               	bnz	l124
   863  0009DC  0419               	decf	SerialPrint@addEndLine,w,c
   864  0009DE  B0D8               	btfsc	status,0,c
   865  0009E0  D002               	goto	l124
   866  0009E2  D006               	goto	l127
   867                           
   868                           ;serial.c: 99: while (!TXSTAbits.TRMT) {
   869  0009E4  D000               	goto	l124
   870  0009E6                     l124:
   871  0009E6  A2AC               	btfss	4012,1,c	;volatile
   872  0009E8  D7FE               	goto	l124
   873                           
   874                           ;serial.c: 100: }
   875                           ;serial.c: 101: TXREG = 10;
   876  0009EA  0E0A               	movlw	10
   877  0009EC  6EAD               	movwf	4013,c	;volatile
   878                           
   879                           ;serial.c: 102: }
   880                           ;serial.c: 103: while (!TXSTAbits.TRMT) {
   881  0009EE  D000               	goto	l127
   882  0009F0                     l127:
   883  0009F0  A2AC               	btfss	4012,1,c	;volatile
   884  0009F2  D7FE               	goto	l127
   885                           
   886                           ;serial.c: 104: }
   887                           ;serial.c: 105: TXREG = 13;
   888  0009F4  0E0D               	movlw	13
   889  0009F6  6EAD               	movwf	4013,c	;volatile
   890  0009F8  0012               	return		;funcret
   891  0009FA                     __end_of_SerialPrint:
   892                           	opt stack 0
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           intcon	equ	0xFF2
   898                           indf0	equ	0xFEF
   899                           postinc0	equ	0xFEE
   900                           fsr0h	equ	0xFEA
   901                           fsr0l	equ	0xFE9
   902                           postdec1	equ	0xFE5
   903                           fsr1h	equ	0xFE2
   904                           fsr1l	equ	0xFE1
   905                           status	equ	0xFD8
   906                           
   907 ;; *************** function _SerialPending *****************
   908 ;; Defined at:
   909 ;;		line 19 in file "serial.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2   20[COMRAM] int 
   916 ;; Registers used:
   917 ;;		None
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   923 ;;      Params:         2       0       0       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0
   926 ;;      Totals:         2       0       0       0       0       0       0       0       0
   927 ;;Total ram usage:        2 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    2
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text3
   938  000E18                     __ptext3:
   939                           	opt stack 0
   940  000E18                     _SerialPending:
   941                           	opt stack 28
   942                           
   943                           ;serial.c: 20: return pending;
   944                           
   945                           ;incstack = 0
   946  000E18  C024  F015         	movff	_pending,?_SerialPending
   947  000E1C  C025  F016         	movff	_pending+1,?_SerialPending+1
   948  000E20  0012               	return		;funcret
   949  000E22                     __end_of_SerialPending:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           intcon	equ	0xFF2
   956                           indf0	equ	0xFEF
   957                           postinc0	equ	0xFEE
   958                           fsr0h	equ	0xFEA
   959                           fsr0l	equ	0xFE9
   960                           postdec1	equ	0xFE5
   961                           fsr1h	equ	0xFE2
   962                           fsr1l	equ	0xFE1
   963                           status	equ	0xFD8
   964                           
   965 ;; *************** function _ReadSerial *****************
   966 ;; Defined at:
   967 ;;		line 23 in file "serial.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  2   20[COMRAM] PTR unsigned char 
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   981 ;;      Params:         2       0       0       0       0       0       0       0       0
   982 ;;      Locals:         0       0       0       0       0       0       0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0       0       0
   984 ;;      Totals:         2       0       0       0       0       0       0       0       0
   985 ;;Total ram usage:        2 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    2
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text4
   996  000DF2                     __ptext4:
   997                           	opt stack 0
   998  000DF2                     _ReadSerial:
   999                           	opt stack 28
  1000                           
  1001                           ;serial.c: 24: if (pending){
  1002                           
  1003                           ;incstack = 0
  1004  000DF2  5024               	movf	_pending,w,c
  1005  000DF4  1025               	iorwf	_pending+1,w,c
  1006  000DF6  B4D8               	btfsc	status,2,c
  1007  000DF8  D009               	goto	l952
  1008                           
  1009                           ;serial.c: 25: pending = 0;
  1010  000DFA  0E00               	movlw	0
  1011  000DFC  6E25               	movwf	_pending+1,c
  1012  000DFE  0E00               	movlw	0
  1013  000E00  6E24               	movwf	_pending,c
  1014                           
  1015                           ;serial.c: 26: return rxExit;
  1016  000E02  0E00               	movlw	low _rxExit
  1017  000E04  6E15               	movwf	?_ReadSerial,c
  1018  000E06  0E02               	movlw	high _rxExit
  1019  000E08  D004               	goto	L1
  1020  000E0A  D005               	goto	l94
  1021  000E0C                     l952:
  1022                           
  1023                           ;serial.c: 27: }
  1024                           ;serial.c: 28: return "\0\0";
  1025  000E0C  0E8C               	movlw	low STR_11
  1026  000E0E  6E15               	movwf	?_ReadSerial,c
  1027  000E10  0E08               	movlw	high STR_11
  1028  000E12                     L1:
  1029  000E12  6E16               	movwf	?_ReadSerial+1,c
  1030  000E14  D000               	goto	l94
  1031  000E16                     l94:
  1032  000E16  0012               	return		;funcret
  1033  000E18                     __end_of_ReadSerial:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           intcon	equ	0xFF2
  1040                           indf0	equ	0xFEF
  1041                           postinc0	equ	0xFEE
  1042                           fsr0h	equ	0xFEA
  1043                           fsr0l	equ	0xFE9
  1044                           postdec1	equ	0xFE5
  1045                           fsr1h	equ	0xFE2
  1046                           fsr1l	equ	0xFE1
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function _Delay1Second *****************
  1050 ;; Defined at:
  1051 ;;		line 21 in file "utils.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  i               2   21[COMRAM] int 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;		None               void
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1065 ;;      Params:         0       0       0       0       0       0       0       0       0
  1066 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1067 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1068 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1069 ;;Total ram usage:        3 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    2
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text5
  1080  0009FA                     __ptext5:
  1081                           	opt stack 0
  1082  0009FA                     _Delay1Second:
  1083                           	opt stack 28
  1084                           
  1085                           ;utils.c: 23: int i=0;
  1086                           
  1087                           ;incstack = 0
  1088  0009FA  0E00               	movlw	0
  1089  0009FC  6E17               	movwf	Delay1Second@i+1,c
  1090  0009FE  0E00               	movlw	0
  1091  000A00  6E16               	movwf	Delay1Second@i,c
  1092                           
  1093                           ;utils.c: 24: LATBbits.LB4 =1;
  1094  000A02  888A               	bsf	3978,4,c	;volatile
  1095                           
  1096                           ;utils.c: 25: for(i=0;i<20;i++)
  1097  000A04  0E00               	movlw	0
  1098  000A06  6E17               	movwf	Delay1Second@i+1,c
  1099  000A08  0E00               	movlw	0
  1100  000A0A  6E16               	movwf	Delay1Second@i,c
  1101  000A0C  BE17               	btfsc	Delay1Second@i+1,7,c
  1102  000A0E  D008               	goto	l792
  1103  000A10  5017               	movf	Delay1Second@i+1,w,c
  1104  000A12  E115               	bnz	l50
  1105  000A14  0E14               	movlw	20
  1106  000A16  5C16               	subwf	Delay1Second@i,w,c
  1107  000A18  B0D8               	btfsc	status,0,c
  1108  000A1A  D011               	goto	l50
  1109  000A1C  D001               	goto	l792
  1110  000A1E  D00F               	goto	l50
  1111  000A20                     l792:
  1112                           
  1113                           ;utils.c: 26: {
  1114                           ;utils.c: 27: _delay((unsigned long)((10)*(8000000/4000.0)));
  1115  000A20  0E1A               	movlw	26
  1116  000A22  6E15               	movwf	??_Delay1Second& (0+255),c
  1117  000A24  0EF8               	movlw	248
  1118  000A26                     u637:
  1119  000A26  2EE8               	decfsz	wreg,f,c
  1120  000A28  D7FE               	goto	u637
  1121  000A2A  2E15               	decfsz	??_Delay1Second& (0+255),f,c
  1122  000A2C  D7FC               	goto	u637
  1123  000A2E  D000               	nop2	
  1124  000A30  4A16               	infsnz	Delay1Second@i,f,c
  1125  000A32  2A17               	incf	Delay1Second@i+1,f,c
  1126  000A34  BE17               	btfsc	Delay1Second@i+1,7,c
  1127  000A36  D7F4               	goto	l792
  1128  000A38  5017               	movf	Delay1Second@i+1,w,c
  1129  000A3A  E101               	bnz	u190
  1130  000A3C  D7EB               	goto	L2
  1131  000A3E                     u190:
  1132  000A3E                     l50:
  1133                           
  1134                           ;utils.c: 28: }
  1135                           ;utils.c: 29: LATBbits.LB4 =0;
  1136  000A3E  988A               	bcf	3978,4,c	;volatile
  1137                           
  1138                           ;utils.c: 30: for(i=0;i<20;i++)
  1139  000A40  0E00               	movlw	0
  1140  000A42  6E17               	movwf	Delay1Second@i+1,c
  1141  000A44  0E00               	movlw	0
  1142  000A46  6E16               	movwf	Delay1Second@i,c
  1143  000A48  BE17               	btfsc	Delay1Second@i+1,7,c
  1144  000A4A  D008               	goto	l802
  1145  000A4C  5017               	movf	Delay1Second@i+1,w,c
  1146  000A4E  E115               	bnz	l52
  1147  000A50  0E14               	movlw	20
  1148  000A52  5C16               	subwf	Delay1Second@i,w,c
  1149  000A54  B0D8               	btfsc	status,0,c
  1150  000A56  D011               	goto	l52
  1151  000A58  D001               	goto	l802
  1152  000A5A  D00F               	goto	l52
  1153  000A5C                     l802:
  1154                           
  1155                           ;utils.c: 31: {
  1156                           ;utils.c: 32: _delay((unsigned long)((10)*(8000000/4000.0)));
  1157  000A5C  0E1A               	movlw	26
  1158  000A5E  6E15               	movwf	??_Delay1Second& (0+255),c
  1159  000A60  0EF8               	movlw	248
  1160  000A62                     u647:
  1161  000A62  2EE8               	decfsz	wreg,f,c
  1162  000A64  D7FE               	goto	u647
  1163  000A66  2E15               	decfsz	??_Delay1Second& (0+255),f,c
  1164  000A68  D7FC               	goto	u647
  1165  000A6A  D000               	nop2	
  1166  000A6C  4A16               	infsnz	Delay1Second@i,f,c
  1167  000A6E  2A17               	incf	Delay1Second@i+1,f,c
  1168  000A70  BE17               	btfsc	Delay1Second@i+1,7,c
  1169  000A72  D7F4               	goto	l802
  1170  000A74  5017               	movf	Delay1Second@i+1,w,c
  1171  000A76  E101               	bnz	u210
  1172  000A78  D7EB               	goto	L3
  1173  000A7A                     u210:
  1174  000A7A                     l52:
  1175                           
  1176                           ;utils.c: 33: }
  1177                           ;utils.c: 34: LATBbits.LB4=1;
  1178  000A7A  888A               	bsf	3978,4,c	;volatile
  1179                           
  1180                           ;utils.c: 35: for(i=0;i<20;i++)
  1181  000A7C  0E00               	movlw	0
  1182  000A7E  6E17               	movwf	Delay1Second@i+1,c
  1183  000A80  0E00               	movlw	0
  1184  000A82  6E16               	movwf	Delay1Second@i,c
  1185  000A84  BE17               	btfsc	Delay1Second@i+1,7,c
  1186  000A86  D008               	goto	l812
  1187  000A88  5017               	movf	Delay1Second@i+1,w,c
  1188  000A8A  E115               	bnz	l54
  1189  000A8C  0E14               	movlw	20
  1190  000A8E  5C16               	subwf	Delay1Second@i,w,c
  1191  000A90  B0D8               	btfsc	status,0,c
  1192  000A92  D011               	goto	l54
  1193  000A94  D001               	goto	l812
  1194  000A96  D00F               	goto	l54
  1195  000A98                     l812:
  1196                           
  1197                           ;utils.c: 36: {
  1198                           ;utils.c: 37: _delay((unsigned long)((10)*(8000000/4000.0)));
  1199  000A98  0E1A               	movlw	26
  1200  000A9A  6E15               	movwf	??_Delay1Second& (0+255),c
  1201  000A9C  0EF8               	movlw	248
  1202  000A9E                     u657:
  1203  000A9E  2EE8               	decfsz	wreg,f,c
  1204  000AA0  D7FE               	goto	u657
  1205  000AA2  2E15               	decfsz	??_Delay1Second& (0+255),f,c
  1206  000AA4  D7FC               	goto	u657
  1207  000AA6  D000               	nop2	
  1208  000AA8  4A16               	infsnz	Delay1Second@i,f,c
  1209  000AAA  2A17               	incf	Delay1Second@i+1,f,c
  1210  000AAC  BE17               	btfsc	Delay1Second@i+1,7,c
  1211  000AAE  D7F4               	goto	l812
  1212  000AB0  5017               	movf	Delay1Second@i+1,w,c
  1213  000AB2  E101               	bnz	u230
  1214  000AB4  D7EB               	goto	L4
  1215  000AB6                     u230:
  1216  000AB6                     l54:
  1217                           
  1218                           ;utils.c: 38: }
  1219                           ;utils.c: 39: LATBbits.LB4 =0;
  1220  000AB6  988A               	bcf	3978,4,c	;volatile
  1221                           
  1222                           ;utils.c: 40: for(i=0;i<20;i++)
  1223  000AB8  0E00               	movlw	0
  1224  000ABA  6E17               	movwf	Delay1Second@i+1,c
  1225  000ABC  0E00               	movlw	0
  1226  000ABE  6E16               	movwf	Delay1Second@i,c
  1227  000AC0  BE17               	btfsc	Delay1Second@i+1,7,c
  1228  000AC2  D008               	goto	l822
  1229  000AC4  5017               	movf	Delay1Second@i+1,w,c
  1230  000AC6  E115               	bnz	l56
  1231  000AC8  0E14               	movlw	20
  1232  000ACA  5C16               	subwf	Delay1Second@i,w,c
  1233  000ACC  B0D8               	btfsc	status,0,c
  1234  000ACE  D011               	goto	l56
  1235  000AD0  D001               	goto	l822
  1236  000AD2  D00F               	goto	l56
  1237  000AD4                     l822:
  1238                           
  1239                           ;utils.c: 41: {
  1240                           ;utils.c: 42: _delay((unsigned long)((10)*(8000000/4000.0)));
  1241  000AD4  0E1A               	movlw	26
  1242  000AD6  6E15               	movwf	??_Delay1Second& (0+255),c
  1243  000AD8  0EF8               	movlw	248
  1244  000ADA                     u667:
  1245  000ADA  2EE8               	decfsz	wreg,f,c
  1246  000ADC  D7FE               	goto	u667
  1247  000ADE  2E15               	decfsz	??_Delay1Second& (0+255),f,c
  1248  000AE0  D7FC               	goto	u667
  1249  000AE2  D000               	nop2	
  1250  000AE4  4A16               	infsnz	Delay1Second@i,f,c
  1251  000AE6  2A17               	incf	Delay1Second@i+1,f,c
  1252  000AE8  BE17               	btfsc	Delay1Second@i+1,7,c
  1253  000AEA  D7F4               	goto	l822
  1254  000AEC  5017               	movf	Delay1Second@i+1,w,c
  1255  000AEE  E101               	bnz	u250
  1256  000AF0  D7EB               	goto	L5
  1257  000AF2                     u250:
  1258  000AF2                     l56:
  1259                           
  1260                           ;utils.c: 43: }
  1261                           ;utils.c: 44: LATBbits.LB4 =1;
  1262  000AF2  888A               	bsf	3978,4,c	;volatile
  1263                           
  1264                           ;utils.c: 45: for(i=0;i<20;i++)
  1265  000AF4  0E00               	movlw	0
  1266  000AF6  6E17               	movwf	Delay1Second@i+1,c
  1267  000AF8  0E00               	movlw	0
  1268  000AFA  6E16               	movwf	Delay1Second@i,c
  1269  000AFC  BE17               	btfsc	Delay1Second@i+1,7,c
  1270  000AFE  D008               	goto	l832
  1271  000B00  5017               	movf	Delay1Second@i+1,w,c
  1272  000B02  E115               	bnz	l58
  1273  000B04  0E14               	movlw	20
  1274  000B06  5C16               	subwf	Delay1Second@i,w,c
  1275  000B08  B0D8               	btfsc	status,0,c
  1276  000B0A  D011               	goto	l58
  1277  000B0C  D001               	goto	l832
  1278  000B0E  D00F               	goto	l58
  1279  000B10                     l832:
  1280                           
  1281                           ;utils.c: 46: {
  1282                           ;utils.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
  1283  000B10  0E1A               	movlw	26
  1284  000B12  6E15               	movwf	??_Delay1Second& (0+255),c
  1285  000B14  0EF8               	movlw	248
  1286  000B16                     u677:
  1287  000B16  2EE8               	decfsz	wreg,f,c
  1288  000B18  D7FE               	goto	u677
  1289  000B1A  2E15               	decfsz	??_Delay1Second& (0+255),f,c
  1290  000B1C  D7FC               	goto	u677
  1291  000B1E  D000               	nop2	
  1292  000B20  4A16               	infsnz	Delay1Second@i,f,c
  1293  000B22  2A17               	incf	Delay1Second@i+1,f,c
  1294  000B24  BE17               	btfsc	Delay1Second@i+1,7,c
  1295  000B26  D7F4               	goto	l832
  1296  000B28  5017               	movf	Delay1Second@i+1,w,c
  1297  000B2A  E101               	bnz	u270
  1298  000B2C  D7EB               	goto	L6
  1299  000B2E                     u270:
  1300  000B2E                     l58:
  1301                           
  1302                           ;utils.c: 48: }
  1303                           ;utils.c: 49: LATBbits.LB4 =0;
  1304  000B2E  988A               	bcf	3978,4,c	;volatile
  1305  000B30  0012               	return		;funcret
  1306  000B32                     __end_of_Delay1Second:
  1307                           	opt stack 0
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           intcon	equ	0xFF2
  1313                           indf0	equ	0xFEF
  1314                           postinc0	equ	0xFEE
  1315                           fsr0h	equ	0xFEA
  1316                           fsr0l	equ	0xFE9
  1317                           wreg	equ	0xFE8
  1318                           postdec1	equ	0xFE5
  1319                           fsr1h	equ	0xFE2
  1320                           fsr1l	equ	0xFE1
  1321                           status	equ	0xFD8
  1322                           
  1323 ;; *************** function _ISR *****************
  1324 ;; Defined at:
  1325 ;;		line 41 in file "serial.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;		None               void
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1339 ;;      Params:         0       0       0       0       0       0       0       0       0
  1340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1341 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1342 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1343 ;;Total ram usage:       18 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    1
  1346 ;; This function calls:
  1347 ;;		_LEDOFF
  1348 ;;		_LEDON
  1349 ;;		_permutAndResetsBuffers
  1350 ;; This function is called by:
  1351 ;;		Interrupt level 2
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	intcode
  1356  000008                     __pintcode:
  1357                           	opt stack 0
  1358  000008                     _ISR:
  1359                           	opt stack 28
  1360                           
  1361                           ;incstack = 0
  1362  000008  CFFA F007          	movff	pclath,??_ISR+4
  1363  00000C  CFFB F008          	movff	pclatu,??_ISR+5
  1364  000010  CFE9 F009          	movff	fsr0l,??_ISR+6
  1365  000014  ED99  F005         	call	int_func,f	;refresh shadow registers
  1366                           pclatu	equ	0xFFB
  1367                           pclath	equ	0xFFA
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           intcon	equ	0xFF2
  1373                           indf0	equ	0xFEF
  1374                           postinc0	equ	0xFEE
  1375                           fsr0h	equ	0xFEA
  1376                           fsr0l	equ	0xFE9
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1h	equ	0xFE2
  1380                           fsr1l	equ	0xFE1
  1381                           status	equ	0xFD8
  1382                           
  1383                           	psect	intcode_body
  1384  000B32                     __pintcode_body:
  1385                           	opt stack 28
  1386  000B32                     int_func:
  1387                           	opt stack 28
  1388  000B32  0006               	pop		; remove dummy address from shadow register refresh
  1389  000B34  CFEA F00A          	movff	fsr0h,??_ISR+7
  1390  000B38  CFE1 F00B          	movff	fsr1l,??_ISR+8
  1391  000B3C  CFE2 F00C          	movff	fsr1h,??_ISR+9
  1392  000B40  CFD9 F00D          	movff	fsr2l,??_ISR+10
  1393  000B44  CFDA F00E          	movff	fsr2h,??_ISR+11
  1394  000B48  CFF3 F00F          	movff	prodl,??_ISR+12
  1395  000B4C  CFF4 F010          	movff	prodh,??_ISR+13
  1396  000B50  CFF6 F011          	movff	tblptrl,??_ISR+14
  1397  000B54  CFF7 F012          	movff	tblptrh,??_ISR+15
  1398  000B58  CFF8 F013          	movff	tblptru,??_ISR+16
  1399  000B5C  CFF5 F014          	movff	tablat,??_ISR+17
  1400                           
  1401                           ;serial.c: 44: if (RCIF)
  1402  000B60  AA9E               	btfss	3998,5,c	;volatile
  1403  000B62  D051               	goto	i2l112
  1404                           
  1405                           ;serial.c: 45: {
  1406                           ;serial.c: 46: LEDON();
  1407  000B64  EC11  F007         	call	_LEDON	;wreg free
  1408                           
  1409                           ;serial.c: 48: if (OERR == 1)
  1410  000B68  A2AB               	btfss	4011,1,c	;volatile
  1411  000B6A  D003               	goto	i2l996
  1412                           
  1413                           ;serial.c: 49: {
  1414                           ;serial.c: 51: CREN = 0;
  1415  000B6C  98AB               	bcf	4011,4,c	;volatile
  1416                           
  1417                           ;serial.c: 52: CREN = 1;
  1418  000B6E  88AB               	bsf	4011,4,c	;volatile
  1419                           
  1420                           ;serial.c: 53: }
  1421  000B70  D04A               	goto	i2l112
  1422  000B72                     i2l996:
  1423                           
  1424                           ;serial.c: 54: else
  1425                           ;serial.c: 55: {
  1426                           ;serial.c: 56: if (rxBufferLevel != 255)
  1427  000B72  2826               	incf	_rxBufferLevel,w,c
  1428  000B74  1027               	iorwf	_rxBufferLevel+1,w,c
  1429  000B76  B4D8               	btfsc	status,2,c
  1430  000B78  D02D               	goto	i2l1010
  1431                           
  1432                           ;serial.c: 57: {
  1433                           ;serial.c: 60: rxBuffer[rxBufferLevel] = RCREG;
  1434  000B7A  0E00               	movlw	low _rxBuffer
  1435  000B7C  2426               	addwf	_rxBufferLevel,w,c
  1436  000B7E  6ED9               	movwf	fsr2l,c
  1437  000B80  0E01               	movlw	high _rxBuffer
  1438  000B82  2027               	addwfc	_rxBufferLevel+1,w,c
  1439  000B84  6EDA               	movwf	fsr2h,c
  1440  000B86  CFAE FFDF          	movff	4014,indf2	;volatile
  1441                           
  1442                           ;serial.c: 62: if (rxBuffer[rxBufferLevel] == '\0' || rxBuffer[rxBufferLevel] == '\n'|| 
      +                          rxBuffer[rxBufferLevel] == '}'){
  1443  000B8A  0E00               	movlw	low _rxBuffer
  1444  000B8C  2426               	addwf	_rxBufferLevel,w,c
  1445  000B8E  6ED9               	movwf	fsr2l,c
  1446  000B90  0E01               	movlw	high _rxBuffer
  1447  000B92  2027               	addwfc	_rxBufferLevel+1,w,c
  1448  000B94  6EDA               	movwf	fsr2h,c
  1449  000B96  50DF               	movf	indf2,w,c
  1450  000B98  B4D8               	btfsc	status,2,c
  1451  000B9A  D014               	goto	i2l1004
  1452  000B9C  0E00               	movlw	low _rxBuffer
  1453  000B9E  2426               	addwf	_rxBufferLevel,w,c
  1454  000BA0  6ED9               	movwf	fsr2l,c
  1455  000BA2  0E01               	movlw	high _rxBuffer
  1456  000BA4  2027               	addwfc	_rxBufferLevel+1,w,c
  1457  000BA6  6EDA               	movwf	fsr2h,c
  1458  000BA8  0E0A               	movlw	10
  1459  000BAA  18DE               	xorwf	postinc2,w,c
  1460  000BAC  B4D8               	btfsc	status,2,c
  1461  000BAE  D00A               	goto	i2l1004
  1462  000BB0  0E00               	movlw	low _rxBuffer
  1463  000BB2  2426               	addwf	_rxBufferLevel,w,c
  1464  000BB4  6ED9               	movwf	fsr2l,c
  1465  000BB6  0E01               	movlw	high _rxBuffer
  1466  000BB8  2027               	addwfc	_rxBufferLevel+1,w,c
  1467  000BBA  6EDA               	movwf	fsr2h,c
  1468  000BBC  0E7D               	movlw	125
  1469  000BBE  18DE               	xorwf	postinc2,w,c
  1470  000BC0  A4D8               	btfss	status,2,c
  1471  000BC2  D005               	goto	i2l1008
  1472  000BC4                     i2l1004:
  1473                           
  1474                           ;serial.c: 63: permutAndResetsBuffers();
  1475  000BC4  EC9E  F006         	call	_permutAndResetsBuffers	;wreg free
  1476                           
  1477                           ;serial.c: 64: LEDOFF();
  1478  000BC8  EC13  F007         	call	_LEDOFF	;wreg free
  1479                           
  1480                           ;serial.c: 65: }
  1481  000BCC  D01C               	goto	i2l112
  1482  000BCE                     i2l1008:
  1483                           
  1484                           ;serial.c: 66: else{
  1485                           ;serial.c: 68: rxBufferLevel++;
  1486  000BCE  4A26               	infsnz	_rxBufferLevel,f,c
  1487  000BD0  2A27               	incf	_rxBufferLevel+1,f,c
  1488                           
  1489                           ;serial.c: 69: }
  1490                           ;serial.c: 70: }
  1491  000BD2  D019               	goto	i2l112
  1492  000BD4                     i2l1010:
  1493                           
  1494                           ;serial.c: 71: else{
  1495                           ;serial.c: 72: rxBuffer[rxBufferLevel-1] = '\0';
  1496  000BD4  0EFF               	movlw	255
  1497  000BD6  6E03               	movwf	??_ISR& (0+255),c
  1498  000BD8  0EFF               	movlw	255
  1499  000BDA  6E04               	movwf	(??_ISR+1)& (0+255),c
  1500  000BDC  C026  F005         	movff	_rxBufferLevel,??_ISR+2
  1501  000BE0  C027  F006         	movff	_rxBufferLevel+1,??_ISR+3
  1502  000BE4  5003               	movf	??_ISR,w,c
  1503  000BE6  2605               	addwf	??_ISR+2,f,c
  1504  000BE8  5004               	movf	??_ISR+1,w,c
  1505  000BEA  2206               	addwfc	??_ISR+3,f,c
  1506  000BEC  0E00               	movlw	low _rxBuffer
  1507  000BEE  2405               	addwf	??_ISR+2,w,c
  1508  000BF0  6ED9               	movwf	fsr2l,c
  1509  000BF2  0E01               	movlw	high _rxBuffer
  1510  000BF4  2006               	addwfc	??_ISR+3,w,c
  1511  000BF6  6EDA               	movwf	fsr2h,c
  1512  000BF8  0E00               	movlw	0
  1513  000BFA  6EDF               	movwf	indf2,c
  1514                           
  1515                           ;serial.c: 73: permutAndResetsBuffers();
  1516  000BFC  EC9E  F006         	call	_permutAndResetsBuffers	;wreg free
  1517                           
  1518                           ;serial.c: 74: LEDOFF();
  1519  000C00  EC13  F007         	call	_LEDOFF	;wreg free
  1520  000C04  D000               	goto	i2l112
  1521  000C06                     i2l112:
  1522  000C06  C014  FFF5         	movff	??_ISR+17,tablat
  1523  000C0A  C013  FFF8         	movff	??_ISR+16,tblptru
  1524  000C0E  C012  FFF7         	movff	??_ISR+15,tblptrh
  1525  000C12  C011  FFF6         	movff	??_ISR+14,tblptrl
  1526  000C16  C010  FFF4         	movff	??_ISR+13,prodh
  1527  000C1A  C00F  FFF3         	movff	??_ISR+12,prodl
  1528  000C1E  C00E  FFDA         	movff	??_ISR+11,fsr2h
  1529  000C22  C00D  FFD9         	movff	??_ISR+10,fsr2l
  1530  000C26  C00C  FFE2         	movff	??_ISR+9,fsr1h
  1531  000C2A  C00B  FFE1         	movff	??_ISR+8,fsr1l
  1532  000C2E  C00A  FFEA         	movff	??_ISR+7,fsr0h
  1533  000C32  C009  FFE9         	movff	??_ISR+6,fsr0l
  1534  000C36  C008  FFFB         	movff	??_ISR+5,pclatu
  1535  000C3A  C007  FFFA         	movff	??_ISR+4,pclath
  1536  000C3E  0011               	retfie		f
  1537  000C40                     __end_of_ISR:
  1538                           	opt stack 0
  1539                           pclatu	equ	0xFFB
  1540                           pclath	equ	0xFFA
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           intcon	equ	0xFF2
  1548                           indf0	equ	0xFEF
  1549                           postinc0	equ	0xFEE
  1550                           fsr0h	equ	0xFEA
  1551                           fsr0l	equ	0xFE9
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1h	equ	0xFE2
  1555                           fsr1l	equ	0xFE1
  1556                           indf2	equ	0xFDF
  1557                           postinc2	equ	0xFDE
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _permutAndResetsBuffers *****************
  1563 ;; Defined at:
  1564 ;;		line 31 in file "serial.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  i               2    0[COMRAM] unsigned int 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;		None               void
  1571 ;; Registers used:
  1572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1581 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        2 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_ISR
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text7
  1592  000D3C                     __ptext7:
  1593                           	opt stack 0
  1594  000D3C                     _permutAndResetsBuffers:
  1595                           	opt stack 28
  1596                           
  1597                           ;serial.c: 32: for (unsigned i = 0; i < rxBufferLevel; i++){
  1598                           
  1599                           ;incstack = 0
  1600  000D3C  0E00               	movlw	0
  1601  000D3E  6E02               	movwf	permutAndResetsBuffers@i+1,c
  1602  000D40  0E00               	movlw	0
  1603  000D42  6E01               	movwf	permutAndResetsBuffers@i,c
  1604  000D44  D011               	goto	i2l962
  1605  000D46                     i2l958:
  1606                           
  1607                           ;serial.c: 33: rxExit[i] = rxBuffer[i];
  1608  000D46  0E00               	movlw	low _rxBuffer
  1609  000D48  2401               	addwf	permutAndResetsBuffers@i,w,c
  1610  000D4A  6ED9               	movwf	fsr2l,c
  1611  000D4C  0E01               	movlw	high _rxBuffer
  1612  000D4E  2002               	addwfc	permutAndResetsBuffers@i+1,w,c
  1613  000D50  6EDA               	movwf	fsr2h,c
  1614  000D52  0E00               	movlw	low _rxExit
  1615  000D54  2401               	addwf	permutAndResetsBuffers@i,w,c
  1616  000D56  6EE1               	movwf	fsr1l,c
  1617  000D58  0E02               	movlw	high _rxExit
  1618  000D5A  2002               	addwfc	permutAndResetsBuffers@i+1,w,c
  1619  000D5C  6EE2               	movwf	fsr1h,c
  1620  000D5E  CFDF FFE7          	movff	indf2,indf1
  1621  000D62  4A01               	infsnz	permutAndResetsBuffers@i,f,c
  1622  000D64  2A02               	incf	permutAndResetsBuffers@i+1,f,c
  1623  000D66  D000               	goto	i2l962
  1624  000D68                     i2l962:
  1625  000D68  5026               	movf	_rxBufferLevel,w,c
  1626  000D6A  5C01               	subwf	permutAndResetsBuffers@i,w,c
  1627  000D6C  5027               	movf	_rxBufferLevel+1,w,c
  1628  000D6E  5802               	subwfb	permutAndResetsBuffers@i+1,w,c
  1629  000D70  A0D8               	btfss	status,0,c
  1630  000D72  D7E9               	goto	i2l958
  1631                           
  1632                           ;serial.c: 34: }
  1633                           ;serial.c: 35: pending = 1;
  1634  000D74  0E00               	movlw	0
  1635  000D76  6E25               	movwf	_pending+1,c
  1636  000D78  0E01               	movlw	1
  1637  000D7A  6E24               	movwf	_pending,c
  1638                           
  1639                           ;serial.c: 36: rxBuffer[0] = '\0';
  1640  000D7C  0E00               	movlw	0
  1641  000D7E  0101               	movlb	1	; () banked
  1642  000D80  6F00               	movwf	_rxBuffer& (0+255),b
  1643                           
  1644                           ;serial.c: 37: rxBufferLevel = 0;
  1645  000D82  0E00               	movlw	0
  1646  000D84  6E27               	movwf	_rxBufferLevel+1,c
  1647  000D86  0E00               	movlw	0
  1648  000D88  6E26               	movwf	_rxBufferLevel,c
  1649                           
  1650                           ; BSR set to: 1
  1651  000D8A  0012               	return		;funcret
  1652  000D8C                     __end_of_permutAndResetsBuffers:
  1653                           	opt stack 0
  1654                           pclatu	equ	0xFFB
  1655                           pclath	equ	0xFFA
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon	equ	0xFF2
  1663                           indf0	equ	0xFEF
  1664                           postinc0	equ	0xFEE
  1665                           fsr0h	equ	0xFEA
  1666                           fsr0l	equ	0xFE9
  1667                           wreg	equ	0xFE8
  1668                           indf1	equ	0xFE7
  1669                           postdec1	equ	0xFE5
  1670                           fsr1h	equ	0xFE2
  1671                           fsr1l	equ	0xFE1
  1672                           indf2	equ	0xFDF
  1673                           postinc2	equ	0xFDE
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _LEDON *****************
  1679 ;; Defined at:
  1680 ;;		line 13 in file "utils.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;		None               void
  1687 ;; Registers used:
  1688 ;;		None
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1697 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1698 ;;Total ram usage:        0 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; This function calls:
  1701 ;;		Nothing
  1702 ;; This function is called by:
  1703 ;;		_ISR
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text8
  1708  000E22                     __ptext8:
  1709                           	opt stack 0
  1710  000E22                     _LEDON:
  1711                           	opt stack 28
  1712                           
  1713                           ;utils.c: 14: LATBbits.LB4 =1;
  1714                           
  1715                           ; BSR set to: 1
  1716                           ;incstack = 0
  1717  000E22  888A               	bsf	3978,4,c	;volatile
  1718  000E24  0012               	return		;funcret
  1719  000E26                     __end_of_LEDON:
  1720                           	opt stack 0
  1721                           pclatu	equ	0xFFB
  1722                           pclath	equ	0xFFA
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           indf0	equ	0xFEF
  1731                           postinc0	equ	0xFEE
  1732                           fsr0h	equ	0xFEA
  1733                           fsr0l	equ	0xFE9
  1734                           wreg	equ	0xFE8
  1735                           indf1	equ	0xFE7
  1736                           postdec1	equ	0xFE5
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           postinc2	equ	0xFDE
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _LEDOFF *****************
  1746 ;; Defined at:
  1747 ;;		line 17 in file "utils.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		None
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_ISR
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text9
  1775  000E26                     __ptext9:
  1776                           	opt stack 0
  1777  000E26                     _LEDOFF:
  1778                           	opt stack 28
  1779                           
  1780                           ;utils.c: 18: LATBbits.LB4 =0;
  1781                           
  1782                           ;incstack = 0
  1783  000E26  988A               	bcf	3978,4,c	;volatile
  1784  000E28  0012               	return		;funcret
  1785  000E2A                     __end_of_LEDOFF:
  1786                           	opt stack 0
  1787                           pclatu	equ	0xFFB
  1788                           pclath	equ	0xFFA
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           indf0	equ	0xFEF
  1797                           postinc0	equ	0xFEE
  1798                           fsr0h	equ	0xFEA
  1799                           fsr0l	equ	0xFE9
  1800                           wreg	equ	0xFE8
  1801                           indf1	equ	0xFE7
  1802                           postdec1	equ	0xFE5
  1803                           fsr1h	equ	0xFE2
  1804                           fsr1l	equ	0xFE1
  1805                           indf2	equ	0xFDF
  1806                           postinc2	equ	0xFDE
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           pclatu	equ	0xFFB
  1811                           pclath	equ	0xFFA
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           indf0	equ	0xFEF
  1820                           postinc0	equ	0xFEE
  1821                           fsr0h	equ	0xFEA
  1822                           fsr0l	equ	0xFE9
  1823                           wreg	equ	0xFE8
  1824                           indf1	equ	0xFE7
  1825                           postdec1	equ	0xFE5
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           indf2	equ	0xFDF
  1829                           postinc2	equ	0xFDE
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834                           	psect	rparam
  1835  0000                     pclatu	equ	0xFFB
  1836                           pclath	equ	0xFFA
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           intcon	equ	0xFF2
  1844                           indf0	equ	0xFEF
  1845                           postinc0	equ	0xFEE
  1846                           fsr0h	equ	0xFEA
  1847                           fsr0l	equ	0xFE9
  1848                           wreg	equ	0xFE8
  1849                           indf1	equ	0xFE7
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           fsr2h	equ	0xFDA
  1856                           fsr2l	equ	0xFD9
  1857                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    0
    Data        0
    BSS         514
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      39
    BANK0           160      0       0
    BANK1           256      0     255
    BANK2           256      0     255
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    SerialPrint@string	PTR unsigned char  size(2) Largest target is 255
		 -> STR_11(CODE[3]), rxExit(BANK2[255]), STR_10(CODE[25]), STR_9(CODE[3]), 
		 -> STR_8(CODE[12]), STR_7(CODE[25]), STR_6(CODE[30]), STR_5(CODE[3]), 
		 -> STR_4(CODE[36]), STR_3(CODE[36]), STR_2(CODE[36]), STR_1(CODE[3]), 

    sp__ReadSerial	PTR unsigned char  size(2) Largest target is 255
		 -> STR_11(CODE[3]), rxExit(BANK2[255]), 


Critical Paths under _main in COMRAM

    _main->_SerialPrint
    _SerialPrint->_ReadSerial

Critical Paths under _ISR in COMRAM

    _ISR->_permutAndResetsBuffers

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5    1824
                                             30 COMRAM     5     0      5
                       _Delay1Second
                         _ReadSerial
                      _SerialPending
                        _SerialPrint
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerialPrint                                          8     4      4    1674
                                             22 COMRAM     8     4      4
                         _ReadSerial (ARG)
 ---------------------------------------------------------------------------------
 (1) _SerialPending                                        2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadSerial                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Delay1Second                                         3     3      0     150
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 18    18      0      68
                                              2 COMRAM    18    18      0
                             _LEDOFF
                              _LEDON
             _permutAndResetsBuffers
 ---------------------------------------------------------------------------------
 (3) _permutAndResetsBuffers                               2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LEDON                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDOFF                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay1Second
   _ReadSerial
   _SerialPending
   _SerialPrint
     _ReadSerial (ARG)
   _Setup

 _ISR (ROOT)
   _LEDOFF
   _LEDON
   _permutAndResetsBuffers

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FF       9       99.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      27       1       41.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     225      20        0.0%
DATA                 0      0     225       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May  3 16:20:50 2019

                             l50 0A3E                               l52 0A7A  
                             l54 0AB6                               l56 0AF2  
                             l58 0B2E                               l94 0E16  
                    __CFG_BOR$ON 000000                      __CFG_BORV$3 000000  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                            l124 09E6                              l116 089E  
                            l127 09F0                              l802 0A5C  
                            l812 0A98                              l822 0AD4  
                            l832 0B10                              l934 09D4  
                            l792 0A20                              l952 0E0C  
                            l928 095C                              l984 0CD6  
                   __CFG_CPB$OFF 000000                              u210 0A7A  
                            u230 0AB6                              u250 0AF2  
                            u410 0916                              u270 0B2E  
                            u190 0A3E                              u430 0948  
                            u408 08DC                              u417 090C  
                   __CFG_CPD$OFF 000000                              u508 09C8  
                            u460 0988                              u380 08CE  
                            _ISR 0008                              u437 093E  
                            u390 08DA                              u480 09BA  
                            u490 09C6                              u467 097E  
                            u387 08C4                              u637 0A26  
                            u647 0A62                              u487 09B0  
                            u657 0A9E                              u667 0ADA  
                            u677 0B16                              wreg 000FE8  
                   __CFG_LVP$OFF 000000                             ?_ISR 0001  
                   __CFG_WDT$OFF 000000                             STR_1 088F  
                           STR_2 0825                             STR_3 0801  
                           STR_4 0825                             STR_5 088F  
                           STR_6 0849                             STR_7 0867  
                           STR_8 0880                             STR_9 088F  
                           _CREN 007D5C                             _RCIF 007CF5  
                           _OERR 007D59  __size_of_permutAndResetsBuffers 0050  
                           _main 0C40                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr0l 000FE9                             fsr2h 000FDA  
                           indf1 000FE7                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           pclat 000FFA                             prodh 000FF4  
                           prodl 000FF3                             start 0018  
                  __CFG_IESO$OFF 000000                     ___param_bank 000010  
                          ??_ISR 0003                    __CFG_PLLDIV$5 000000  
                 __CFG_CCP2MX$ON 000000            __end_of_SerialPending 0E22  
                          ?_main 001F                            STR_10 0867  
                          STR_11 088C                            _LEDON 0E22  
                          i2l112 0C06                            i2l962 0D68  
                          i2l958 0D46                            i2l996 0B72  
                          _RCREG 000FAE                            _SPBRG 000FAF  
                  __CFG_USBDIV$2 000000                            _TXREG 000FAD  
                  __CFG_PWRT$OFF 000000                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                          _Setup 0DC6                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                            tablat 000FF5  
                          status 000FD8            __size_of_Delay1Second 0138  
                 __CFG_MCLRE$OFF 000000                  __initialization 0D8C  
                   __end_of_main 0D3C                       _ReadSerial 0DF2  
         _permutAndResetsBuffers 0D3C                           ??_main 0024  
                         ?_LEDON 0001                    __activetblptr 000002  
        permutAndResetsBuffers@i 0001                           ?_Setup 0001  
                   _Delay1Second 09FA                           _LEDOFF 0E26  
                         i2l1010 0BD4                           i2l1004 0BC4  
                         i2l1008 0BCE                    ??_SerialPrint 001B  
                 __CFG_VREGEN$ON 000000                   __CFG_XINST$OFF 000000  
                 __CFG_STVREN$ON 000000                           clear_0 0D94  
                         clear_1 0DA8                           _rxExit 0200  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                     __accesstop 0060          __end_of__initialization 0DBC  
                __CFG_PBADEN$OFF 000000                    ___rparam_used 000001  
                  __end_of_LEDON 0E26                   __pcstackCOMRAM 0001  
                  __end_of_Setup 0DF2                      ?_ReadSerial 0015  
            __end_of_SerialPrint 09FA              SerialPrint@position 001D  
                        ??_LEDON 0001                          ??_Setup 0015  
                        ?_LEDOFF 0001                       __pbssBANK1 0100  
                     __pbssBANK2 0200                SerialPrint@string 0017  
            __size_of_ReadSerial 0026                  __size_of_LEDOFF 0004  
                    _SerialPrint 0894                          __Hparam 0000  
                        __Lparam 0000          ?_permutAndResetsBuffers 0001  
                   __psmallconst 0800                          __pcinit 0D8C  
                        __ramtop 0800                          __ptext0 0C40  
                        __ptext1 0DC6                          __ptext2 0894  
                        __ptext3 0E18                          __ptext4 0DF2  
                        __ptext5 09FA                          __ptext7 0D3C  
                        __ptext8 0E22                          __ptext9 0E26  
                   __size_of_ISR 0C38                          _pending 0024  
                 __pintcode_body 0B32             end_of_initialization 0DBC  
                  __Lmediumconst 0000                          int_func 0B32  
         __size_of_SerialPending 000A   __end_of_permutAndResetsBuffers 0D8C  
                      _RCSTAbits 000FAB                          postdec1 000FE5  
                        postinc0 000FEE                          postinc2 000FDE  
                      _PORTCbits 000F82                        _TRISBbits 000F93  
                      _TRISCbits 000F94                   __end_of_LEDOFF 0E2A  
                      _TXSTAbits 000FAC                     ??_ReadSerial 0017  
                    _BAUDCONbits 000FB8                    _SerialPending 0E18  
            start_initialization 0D8C                      __end_of_ISR 0C40  
                       ??_LEDOFF 0001               __end_of_ReadSerial 0E18  
               __CFG_LPT1OSC$OFF 000000                    _rxBufferLevel 0026  
                 ?_SerialPending 0015                      __pbssCOMRAM 0024  
                   ?_SerialPrint 0017                        __pintcode 0008  
                 __size_of_LEDON 0004                      __smallconst 0800  
                 __size_of_Setup 002C                    ?_Delay1Second 0001  
                       _LATBbits 000F8A                         _LATCbits 000F8B  
                       _PIE1bits 000F9D                 __CFG_WDTPS$32768 000000  
                ??_SerialPending 0017                   ??_Delay1Second 0015  
                       __Hrparam 0000                         __Lrparam 0000  
                  __size_of_main 00FC                         _rxBuffer 0100  
           __size_of_SerialPrint 0166            SerialPrint@addEndLine 0019  
                       main@argc 001F                         main@argv 0021  
          __CFG_CPUDIV$OSC1_PLL2 000000                       _INTCONbits 000FF2  
                       intlevel2 0000         ??_permutAndResetsBuffers 0001  
                     _OSCCONbits 000FD3             __end_of_Delay1Second 0B32  
            __CFG_FOSC$INTOSC_HS 000000                    Delay1Second@i 0016  
